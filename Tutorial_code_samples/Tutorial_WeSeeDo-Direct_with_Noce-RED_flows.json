[{"id":"16810f18.e90d91","type":"tab","label":"WeeSeeDo: All requests","disabled":false,"info":""},{"id":"f88bcc45.eb182","type":"switch","z":"16810f18.e90d91","name":"If access token received","property":"statusCode","propertyType":"msg","rules":[{"t":"eq","v":"200","vt":"str"},{"t":"else"}],"checkall":"true","repair":false,"outputs":2,"x":590,"y":926,"wires":[["f36aaeed.e6518"],["bb212814.2c5338"]],"inputLabels":["httpResult"],"outputLabels":["noToken","tokenReceived"]},{"id":"bb212814.2c5338","type":"debug","z":"16810f18.e90d91","name":"No token","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","statusVal":"","statusType":"auto","x":800,"y":966,"wires":[]},{"id":"4677a00c.7453a","type":"http request","z":"16810f18.e90d91","name":"Create user request","method":"use","ret":"obj","paytoqs":"ignore","url":"","tls":"","persist":false,"proxy":"","authType":"","x":1250,"y":886,"wires":[["b6c24788.2c8eb8"]]},{"id":"3344759c.f1c1fa","type":"function","z":"16810f18.e90d91","name":"Prepare request","func":"/*\nUse Access (Bearer) token to authenticate API call.\nIn this example, we will use the \"/sms-kpn/v1/send\" API\n\nNote: The Access token gets retrieved from the \nauthorization request: `msg.payload.access_token`\n*/\n\nvar baseURL = \"https://api-prd.kpn.com/communication/weseedo/weseedodirect/api\";\nvar apiEndpoint = \"/users\";\n\nmsg.method = \"POST\";\nmsg.url = baseURL + apiEndpoint;\nmsg.headers = {};\nmsg.headers.Authorization = \"Bearer \" + msg.payload.access_token;\nmsg.headers[\"Content-Type\"] = \"application/json\";\n//msg.payload = null;\nmsg.payload = msg.json;\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","x":1040,"y":886,"wires":[["4677a00c.7453a"]],"info":"Use Bearer token from previous request in the headers to authenticate API request.\n\nNote: The bearer token gets retrieved from the payload of the previous authorization request: `msg.payload.access_token`\n"},{"id":"b6c24788.2c8eb8","type":"debug","z":"16810f18.e90d91","name":"Create user request result","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":1490,"y":886,"wires":[]},{"id":"f36aaeed.e6518","type":"change","z":"16810f18.e90d91","name":"Set request body","rules":[{"t":"set","p":"json","pt":"msg","to":"{\"first_name\":\"New user first name\",\"last_name\":\"New user family name\",\"password\":\"new.user.1234\",\"role\":\"CFO\",\"email\":\"new.user@email.com\",\"locale\":\"nl\",\"company\":\"TestUser Ltd\"}","tot":"json"}],"action":"","property":"","from":"","to":"","reg":false,"x":830,"y":886,"wires":[["3344759c.f1c1fa"]],"info":"1. Double-click `Set request body`\n2. Open the json and enter the details of the new user.\n```\n{\n    \"first_name\": \"New user first name\",\n    \"last_name\": \"New user family name\",\n    \"password\": \"new.user.1234\",\n    \"role\": \"CFO\",\n    \"email\": \"new.user@email.com\",\n    \"locale\": \"nl\",\n    \"company\": \"TestUser Ltd\"\n}\n```\n3. click `Done`"},{"id":"728754f4.267f3c","type":"comment","z":"16810f18.e90d91","name":"Create user","info":"1. Double-click the node `Set request body`\n2. Open the json and enter the details of the new user.\n```\n{\n    \"first_name\": \"New user first name\",\n    \"last_name\": \"New user family name\",\n    \"password\": \"new.user.1234\",\n    \"role\": \"CFO\",\n    \"email\": \"new.user@email.com\",\n    \"locale\": \"nl\",\n    \"company\": \"TestUser Ltd\"\n}\n```\n3. Click `Done`\n4. Click on the `Trigger request` button to send the request.","x":90,"y":926,"wires":[]},{"id":"9246a174.b1c06","type":"comment","z":"16810f18.e90d91","name":"Obtain access token","info":"1. Go to KPN API Store and copy your credentials.\n2. Double-click the node `Set credentials`.\n2. Enter your KPN API Storecredentials.\n3. Click `Done`","x":110,"y":120,"wires":[]},{"id":"35e53703.8619a8","type":"inject","z":"16810f18.e90d91","name":"Trigger request","props":[{"p":"payload"},{"p":"topic","vt":"str"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"","payloadType":"date","x":120,"y":200,"wires":[["5e038601.27bfd8"]]},{"id":"5e038601.27bfd8","type":"credentials","z":"16810f18.e90d91","name":"Set API Store credentials","props":[{"value":"client_id","type":"msg"},{"value":"client_secret","type":"msg"}],"x":350,"y":200,"wires":[["c588935d.16a6e"]]},{"id":"c588935d.16a6e","type":"function","z":"16810f18.e90d91","name":"Prepare request","func":"/*\nTo use KPN APIs, an access token (also called bearer) token must first be obtained.\nThe bearer token is obtained by invoking an Authorization API (`loginAPI`) using a POST method.\nThe API payload is an object with the client credentials:\n\nclient_id\nclient_secret\n\nIf correct, the API returns a payload object that will contain a valid access token authentication in subsequest API requests.\n*/\n\n// set `loginAPI` API here:\n\nvar loginAPI = \"https://api-prd.kpn.com/oauth/client_credential/accesstoken?grant_type=client_credentials\";\n\nmsg.method = \"POST\";\nmsg.url = loginAPI;\nmsg.headers = {};\nmsg.headers[\"Content-Type\"] = \"application/x-www-form-urlencoded\";\n\n// Use your `client_id` and `client_secret` from KPN API Store.\nmsg.payload = 'client_id=' + msg.client_id + '&client_secret=' + msg.client_secret;\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","x":580,"y":200,"wires":[["ef8396e8.2218e8"]],"info":"To use KPN APIs, an access token (also called bearer) token must first be obtained.\n\nThe bearer token is obtained by invoking an Authorization API (`loginAPI`) using a POST method.\n\nThe API payload is an object with the `client credentials`:\n* `client_id`\n* `client_secret`\n\n\nUse your `client_id` and `client_secret` from KPN API Store.\n\nIf correct, the API returns a payload object that will contain a valid access token authentication in subsequest API requests."},{"id":"ef8396e8.2218e8","type":"http request","z":"16810f18.e90d91","name":"Access token request","method":"use","ret":"obj","paytoqs":"ignore","url":"","tls":"","persist":false,"proxy":"","authType":"","x":280,"y":360,"wires":[["b33361b.3e0f2a","17eb33ff.bce37c"]]},{"id":"b33361b.3e0f2a","type":"debug","z":"16810f18.e90d91","name":"Token request result","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":1460,"y":160,"wires":[]},{"id":"48e4cad2.cd52f4","type":"switch","z":"16810f18.e90d91","name":"If access token received","property":"statusCode","propertyType":"msg","rules":[{"t":"eq","v":"200","vt":"str"},{"t":"else"}],"checkall":"true","repair":false,"outputs":2,"x":590,"y":1127,"wires":[["72891e48.6d853"],["3a2c8dd3.96c102"]],"inputLabels":["httpResult"],"outputLabels":["noToken","tokenReceived"]},{"id":"3a2c8dd3.96c102","type":"debug","z":"16810f18.e90d91","name":"No token","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","statusVal":"","statusType":"auto","x":800,"y":1167,"wires":[]},{"id":"41c71866.dd04f8","type":"http request","z":"16810f18.e90d91","name":"Create user request","method":"use","ret":"obj","paytoqs":"ignore","url":"","tls":"","persist":false,"proxy":"","authType":"","x":1410,"y":1087,"wires":[["cb59fe21.b12ea"]]},{"id":"9a20cfc3.fcae5","type":"function","z":"16810f18.e90d91","name":"Prepare request","func":"/*\nUse Access (Bearer) token to authenticate API call.\nIn this example, we will use the \"/sms-kpn/v1/send\" API\n\nNote: The Access token gets retrieved from the \nauthorization request: `msg.payload.access_token`\n\nAdd `user_email` as header in order to send the SMS.\n*/\n\nvar baseURL = \"https://api-prd.kpn.com/communication/weseedo/weseedodirect/api\";\nvar apiEndpoint = \"/users/\";\n\nmsg.method = \"PUT\";\nmsg.url = baseURL + apiEndpoint + msg.user_id;\nmsg.headers = {};\nmsg.headers.Authorization = \"Bearer \" + msg.payload.access_token;\nmsg.headers[\"Content-Type\"] = \"application/json\";\n//msg.payload = null;\nmsg.payload = msg.json;\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","x":1200,"y":1087,"wires":[["41c71866.dd04f8","e5f778b8.6990d8"]],"info":"Use Bearer token from previous request in the headers to authenticate API request.\n\nNote: The bearer token gets retrieved from the payload of the previous authorization request: `msg.payload.access_token`\n"},{"id":"cb59fe21.b12ea","type":"debug","z":"16810f18.e90d91","name":"Create user request result","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":1650,"y":1087,"wires":[]},{"id":"72891e48.6d853","type":"change","z":"16810f18.e90d91","name":"Set request body","rules":[{"t":"set","p":"json","pt":"msg","to":"{\"first_name\":\"D\",\"last_name\":\"C\",\"locale\":\"nl\"}","tot":"json"}],"action":"","property":"","from":"","to":"","reg":false,"x":830,"y":1087,"wires":[["183bdf1f.73a8e1"]]},{"id":"e5f778b8.6990d8","type":"debug","z":"16810f18.e90d91","name":"Prepare request result","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":1060,"y":1167,"wires":[]},{"id":"183bdf1f.73a8e1","type":"credentials","z":"16810f18.e90d91","name":"User ID","props":[{"value":"user_id","type":"msg"}],"x":1020,"y":1087,"wires":[["9a20cfc3.fcae5"]]},{"id":"99c787ff.9fe618","type":"comment","z":"16810f18.e90d91","name":"Update user","info":"1. Double-click the node `Set request body`\n2. Open the json and enter the details of the user.\n```\n{\n    \"first_name\": \"Updated first name\",\n    \"last_name\": \"Updated family name\",\n    \"password\": \"Updated.user.1234\",\n    \"role\": \"CFO\",\n    \"email\": \"new.user@email.com\",\n    \"locale\": \"nl\",\n    \"company\": \"TestUser Ltd\"\n}\n```\n3. Double-click `Done`\n4. Double-click the node `User ID`.\n5. Enter the ID of the user you want to update.\n6. Click `Done.`\n7. Click on the `Trigger request` button to send the request.\n","x":90,"y":1127,"wires":[]},{"id":"17eb33ff.bce37c","type":"switch","z":"16810f18.e90d91","name":"If access token received","property":"statusCode","propertyType":"msg","rules":[{"t":"eq","v":"200","vt":"str"},{"t":"else"}],"checkall":"true","repair":false,"outputs":2,"x":590,"y":480,"wires":[["1749dd4b.4213f3"],["1ddbd5f8.41ac5a"]],"inputLabels":["httpResult"],"outputLabels":["noToken","tokenReceived"]},{"id":"1ddbd5f8.41ac5a","type":"debug","z":"16810f18.e90d91","name":"No token","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","statusVal":"","statusType":"auto","x":800,"y":520,"wires":[]},{"id":"afbeff4b.6c79b","type":"http request","z":"16810f18.e90d91","name":"Create user request","method":"use","ret":"obj","paytoqs":"ignore","url":"","tls":"","persist":false,"proxy":"","authType":"","x":1030,"y":440,"wires":[["efad28ae.c50078"]]},{"id":"1749dd4b.4213f3","type":"function","z":"16810f18.e90d91","name":"Prepare request","func":"/*\nUse Access (Bearer) token to authenticate API call.\nIn this example, we will use the \"/sms-kpn/v1/send\" API\n\nNote: The Access token gets retrieved from the \nauthorization request: `msg.payload.access_token`\n\nFor WeSeeDo:\nAdd the header `company_email`\n*/\n\nvar baseURL = \"https://api-prd.kpn.com/communication/weseedo/weseedodirect/api\";\nvar apiEndpoint = \"/users\";\n\nmsg.method = \"GET\";\nmsg.url = baseURL + apiEndpoint;\nmsg.headers = {};\nmsg.headers.Authorization = \"Bearer \" + msg.payload.access_token;\nmsg.headers[\"Content-Type\"] = \"application/json\";\n//msg.payload = null;\nmsg.payload = msg.json;\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","x":820,"y":440,"wires":[["afbeff4b.6c79b"]],"info":"Use Bearer token from previous request in the headers to authenticate API request.\n\nNote: The bearer token gets retrieved from the payload of the previous authorization request: `msg.payload.access_token`\n"},{"id":"efad28ae.c50078","type":"debug","z":"16810f18.e90d91","name":"Create user request result","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":1470,"y":440,"wires":[]},{"id":"138b7fd7.cc617","type":"comment","z":"16810f18.e90d91","name":"Retrieve list of users","info":"1. Click on the `Trigger request` button to send the request.","x":110,"y":480,"wires":[]},{"id":"5bc2cfea.15a29","type":"switch","z":"16810f18.e90d91","name":"If access token received","property":"statusCode","propertyType":"msg","rules":[{"t":"eq","v":"200","vt":"str"},{"t":"else"}],"checkall":"true","repair":false,"outputs":2,"x":590,"y":698,"wires":[["26f6db38.6b0fd4"],["ffd97203.60d1a"]],"inputLabels":["httpResult"],"outputLabels":["noToken","tokenReceived"]},{"id":"ffd97203.60d1a","type":"debug","z":"16810f18.e90d91","name":"No token","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","statusVal":"","statusType":"auto","x":800,"y":738,"wires":[]},{"id":"f512d0a2.1d6c2","type":"http request","z":"16810f18.e90d91","name":"Create user request","method":"use","ret":"obj","paytoqs":"ignore","url":"","tls":"","persist":false,"proxy":"","authType":"","x":1230,"y":658,"wires":[["13ba8cbc.0d69f3"]]},{"id":"bb38e964.2b6448","type":"function","z":"16810f18.e90d91","name":"Prepare request","func":"/*\nUse Access (Bearer) token to authenticate API call.\nIn this example, we will use the \"/sms-kpn/v1/send\" API\n\nNote: The Access token gets retrieved from the \nauthorization request: `msg.payload.access_token`\n\nAdd `user_email` as header in order to send the SMS.\n*/\n\nvar baseURL = \"https://api-prd.kpn.com/communication/weseedo/weseedodirect/api\";\nvar apiEndpoint = \"/users/\";\n\nmsg.method = \"GET\";\nmsg.url = baseURL + apiEndpoint + msg.user_id;\nmsg.headers = {};\nmsg.headers.Authorization = \"Bearer \" + msg.payload.access_token;\nmsg.headers[\"Content-Type\"] = \"application/json\";\n//msg.payload = null;\nmsg.payload = msg.json;\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","x":1000,"y":658,"wires":[["f512d0a2.1d6c2","66199b9d.d13a64"]],"info":"Use Bearer token from previous request in the headers to authenticate API request.\n\nNote: The bearer token gets retrieved from the payload of the previous authorization request: `msg.payload.access_token`\n"},{"id":"13ba8cbc.0d69f3","type":"debug","z":"16810f18.e90d91","name":"Create user request result","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":1470,"y":658,"wires":[]},{"id":"66199b9d.d13a64","type":"debug","z":"16810f18.e90d91","name":"Prepare request result","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":1040,"y":738,"wires":[]},{"id":"db261d5d.2f3b4","type":"comment","z":"16810f18.e90d91","name":"Retrieve individual user","info":"1. Double-click the node `User ID`.\n2. Enter the ID of the user you want to retrieve. \n3. Click `Done.`\n4. Click on the `Trigger request` button to send the request.","x":120,"y":698,"wires":[]},{"id":"26f6db38.6b0fd4","type":"credentials","z":"16810f18.e90d91","name":"User ID","props":[{"value":"user_id","type":"msg"}],"x":800,"y":658,"wires":[["bb38e964.2b6448"]]},{"id":"92e4f2de.d5afb","type":"switch","z":"16810f18.e90d91","name":"If access token received","property":"statusCode","propertyType":"msg","rules":[{"t":"eq","v":"200","vt":"str"},{"t":"else"}],"checkall":"true","repair":false,"outputs":2,"x":590,"y":1342,"wires":[["b0d83c42.98f42"],["714d958b.4e7efc"]],"inputLabels":["httpResult"],"outputLabels":["noToken","tokenReceived"]},{"id":"714d958b.4e7efc","type":"debug","z":"16810f18.e90d91","name":"No token","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","statusVal":"","statusType":"auto","x":800,"y":1382,"wires":[]},{"id":"79016f35.d7f1e","type":"http request","z":"16810f18.e90d91","name":"Create user request","method":"use","ret":"obj","paytoqs":"ignore","url":"","tls":"","persist":false,"proxy":"","authType":"","x":1290,"y":1302,"wires":[["e61a145c.604a38"]]},{"id":"b1382d73.386fb","type":"function","z":"16810f18.e90d91","name":"Prepare request","func":"/*\nUse Access (Bearer) token to authenticate API call.\nIn this example, we will use the \"/sms-kpn/v1/send\" API\n\nNote: The Access token gets retrieved from the \nauthorization request: `msg.payload.access_token`\n\nAdd `user_email` as header in order to send the SMS.\n*/\n\nvar baseURL = \"https://api-prd.kpn.com/communication/weseedo/weseedodirect/api\";\nvar apiEndpoint = \"/users/\";\n\nmsg.method = \"GET\";\nmsg.url = baseURL + apiEndpoint + msg.user_id;\nmsg.headers = {};\nmsg.headers.Authorization = \"Bearer \" + msg.payload.access_token;\nmsg.headers[\"Content-Type\"] = \"application/json\";\n//msg.payload = null;\nmsg.payload = msg.json;\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","x":1000,"y":1302,"wires":[["79016f35.d7f1e","7afb105c.370aa"]],"info":"Use Bearer token from previous request in the headers to authenticate API request.\n\nNote: The bearer token gets retrieved from the payload of the previous authorization request: `msg.payload.access_token`\n"},{"id":"e61a145c.604a38","type":"debug","z":"16810f18.e90d91","name":"Create user request result","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":1650,"y":1300,"wires":[]},{"id":"7afb105c.370aa","type":"debug","z":"16810f18.e90d91","name":"Prepare request result","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":1040,"y":1382,"wires":[]},{"id":"eb0782ef.e2898","type":"comment","z":"16810f18.e90d91","name":"Delete user","info":"1. Double-click the node `User ID`.\n2. Enter the ID of the user you want to delete. \n3. Click `Done.`\n4. Click on the `Trigger request` button to send the request.","x":90,"y":1342,"wires":[]},{"id":"b0d83c42.98f42","type":"credentials","z":"16810f18.e90d91","name":"User ID","props":[{"value":"user_id","type":"msg"}],"x":800,"y":1302,"wires":[["b1382d73.386fb"]]},{"id":"bde621cc.b57f2","type":"switch","z":"16810f18.e90d91","name":"If access token received","property":"statusCode","propertyType":"msg","rules":[{"t":"eq","v":"200","vt":"str"},{"t":"else"}],"checkall":"true","repair":false,"outputs":2,"x":590,"y":1561,"wires":[["4171bddf.4c5bc4"],["f408405.edfdec"]],"inputLabels":["httpResult"],"outputLabels":["noToken","tokenReceived"]},{"id":"f408405.edfdec","type":"debug","z":"16810f18.e90d91","name":"No token","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","statusVal":"","statusType":"auto","x":800,"y":1601,"wires":[]},{"id":"76a26788.9293b8","type":"http request","z":"16810f18.e90d91","name":"Create user request","method":"use","ret":"obj","paytoqs":"ignore","url":"","tls":"","persist":false,"proxy":"","authType":"","x":1250,"y":1521,"wires":[["c6583b2.1d9e2c8"]]},{"id":"a2528fb7.be4f1","type":"function","z":"16810f18.e90d91","name":"Prepare request","func":"/*\nUse Access (Bearer) token to authenticate API call.\nIn this example, we will use the \"/sms-kpn/v1/send\" API\n\nNote: The Access token gets retrieved from the \nauthorization request: `msg.payload.access_token`\n*/\n\nvar baseURL = \"https://api-prd.kpn.com/communication/weseedo/weseedodirect/api\";\nvar apiEndpoint = \"/meeting\";\n\nmsg.method = \"POST\";\nmsg.url = baseURL + apiEndpoint;\nmsg.headers = {};\nmsg.headers.Authorization = \"Bearer \" + msg.payload.access_token;\nmsg.headers[\"Content-Type\"] = \"application/json\";\nmsg.headers[\"user_email\"] = \"test.user@email.com\";\n//msg.payload = null;\nmsg.payload = msg.json;\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","x":1040,"y":1521,"wires":[["76a26788.9293b8","37ec1208.5fc85e"]],"info":"Use Bearer token from previous request in the headers to authenticate API request.\n\nNote: The bearer token gets retrieved from the payload of the previous authorization request: `msg.payload.access_token`\n"},{"id":"c6583b2.1d9e2c8","type":"debug","z":"16810f18.e90d91","name":"Create user request result","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":1650,"y":1520,"wires":[]},{"id":"4171bddf.4c5bc4","type":"change","z":"16810f18.e90d91","name":"Set request body","rules":[{"t":"set","p":"json","pt":"msg","to":"{\"participant\":\"0612345678\"}","tot":"json"}],"action":"","property":"","from":"","to":"","reg":false,"x":830,"y":1521,"wires":[["a2528fb7.be4f1"]]},{"id":"db8eb52d.59ccf8","type":"comment","z":"16810f18.e90d91","name":"Create meeting","info":"1. Double-click the node `Set request body`\n2. Open the json and enter the telephone number of the participant. Dutch formats `0612345678` and`12345678` are automatically converted to their international format `+31612345678`.\n```\n{\n    \"participant\": \"0612345678\"\n}\n```\n3. Click `Done`.\n4. Click on the `Trigger request` button to send the request.\n5. Go to the Debug message `Create user result` and open the following:\n - `object`\n - `payload`\n - `result`\n - `participants`\n - `1: object`\n6. Save the `id` of the participant (visitor) and the `hash` for the `Send meeting invitation to participant request`.\n\n```\n\"participants\": [\n    {\n      \"username\": \"visitor.aSpde07KI7sIHfsD\",\n      \"name\": \"0612345678\",\n      \"id\": \"THE_ID_OF_THE_PARTICIPANT\",\n      \"hash\": \"A_HASHED_TOKEN_FOR_THE_PARTICIPANT\"\n    }\n        \n```\n","x":100,"y":1561,"wires":[]},{"id":"a64fbb4d.418e48","type":"switch","z":"16810f18.e90d91","name":"If access token received","property":"statusCode","propertyType":"msg","rules":[{"t":"eq","v":"200","vt":"str"},{"t":"else"}],"checkall":"true","repair":false,"outputs":2,"x":590,"y":1800,"wires":[["b3add995.cbb2d8"],["fb0bd50d.df6e38"]],"inputLabels":["httpResult"],"outputLabels":["noToken","tokenReceived"]},{"id":"fb0bd50d.df6e38","type":"debug","z":"16810f18.e90d91","name":"No token","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","statusVal":"","statusType":"auto","x":800,"y":1840,"wires":[]},{"id":"dd2f5f00.f9105","type":"http request","z":"16810f18.e90d91","name":"Create user request","method":"use","ret":"obj","paytoqs":"ignore","url":"","tls":"","persist":false,"proxy":"","authType":"","x":1260,"y":1760,"wires":[["50ab8f49.2a349"]]},{"id":"29b9da20.10cc86","type":"function","z":"16810f18.e90d91","name":"Prepare request","func":"/*\nUse Access (Bearer) token to authenticate API call.\nIn this example, we will use the \"/sms-kpn/v1/send\" API\n\nNote: The Access token gets retrieved from the \nauthorization request: `msg.payload.access_token`\n\nJSON in Set Request:\nUse the `id` of the participant that was returned when creating the meeting.\n\n\n'participant': Add `user_email` as header in order to send the SMS.\n'body': Use the `hash` of the participant that was returned when creating the meeting in the secure URL.\n\n*/\n\nvar baseURL = \"https://api-prd.kpn.com/communication/weseedo/weseedodirect/api\";\nvar apiEndpoint = \"/sms\";\n\nmsg.method = \"POST\";\nmsg.url = baseURL + apiEndpoint;\nmsg.headers = {};\nmsg.headers.Authorization = \"Bearer \" + msg.payload.access_token;\nmsg.headers[\"Content-Type\"] = \"application/json\";\nmsg.headers[\"user_email\"] = \"test.user@email.com\";\n//msg.payload = null;\nmsg.payload = msg.json;\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","x":1040,"y":1760,"wires":[["dd2f5f00.f9105","b855c0b6.ef79c"]],"info":"Use Bearer token from previous request in the headers to authenticate API request.\n\nNote: The bearer token gets retrieved from the payload of the previous authorization request: `msg.payload.access_token`\n"},{"id":"50ab8f49.2a349","type":"debug","z":"16810f18.e90d91","name":"Create user request result","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":1570,"y":1760,"wires":[]},{"id":"b3add995.cbb2d8","type":"change","z":"16810f18.e90d91","name":"Set request body","rules":[{"t":"set","p":"json","pt":"msg","to":"{\"participant\":\"5f36a7a970d9e4667019a477\",\"body\":\"WeSeeDo TEST: https://sandbox-direct.weseedo.nl/client.html?id=EOpegQkeeVRb8IGdKUcIruahc8flgCuu_3iQApmB1Lak2rDAk8Gw16X8yADi6RUxe\"}","tot":"json"}],"action":"","property":"","from":"","to":"","reg":false,"x":830,"y":1760,"wires":[["29b9da20.10cc86"]]},{"id":"b855c0b6.ef79c","type":"debug","z":"16810f18.e90d91","name":"Prepare request result","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":1060,"y":1840,"wires":[]},{"id":"8dba8f0c.f76d6","type":"comment","z":"16810f18.e90d91","name":"Send meeting invitation to participant","info":"1. Double-click the node `Set request body`\n2. Open the json and enter the `id` of the participant and the `hash` from the response of the `Create meeting` request.\n```\n{\n    \"participant\": \"THE_ID_OF_THE_PARTICIPANT\",\n    \"body\": \"WeSeeDo TEST: https://sandbox-direct.weseedo.nl/client.html?id=A_HASHED_TOKEN_FOR_THE_PARTICIPANT\"\n}\n```\n3. Click `Done`.\n4. Click on the `Trigger request` button to send the request.","x":160,"y":1788,"wires":[]},{"id":"37ec1208.5fc85e","type":"debug","z":"16810f18.e90d91","name":"Prepare request result","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":1060,"y":1600,"wires":[]}]