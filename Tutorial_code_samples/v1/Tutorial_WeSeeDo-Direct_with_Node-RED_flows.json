[{"id":"60c1ca1e.454ad4","type":"tab","label":"WeeSeeDo Direct v1","disabled":false,"info":""},{"id":"6237cdfb.c664e4","type":"switch","z":"60c1ca1e.454ad4","name":"If access token received","property":"statusCode","propertyType":"msg","rules":[{"t":"eq","v":"200","vt":"str"},{"t":"else"}],"checkall":"true","repair":false,"outputs":2,"x":670,"y":500,"wires":[["55d9045c.be1ddc"],[]],"inputLabels":["httpResult"],"outputLabels":["noToken","tokenReceived"]},{"id":"4cc0a98e.b309e8","type":"http request","z":"60c1ca1e.454ad4","name":"Create user request","method":"use","ret":"obj","paytoqs":"ignore","url":"","tls":"","persist":false,"proxy":"","authType":"","x":1340,"y":498,"wires":[["109c86f.1fd6e79"]]},{"id":"7ad90aa8.e21a54","type":"function","z":"60c1ca1e.454ad4","name":"Prepare request","func":"/*\nUse Access (Bearer) token to authenticate API call.\nIn this example, we will use the \"/sms-kpn/v1/send\" API\n\nNote: The Access token gets retrieved from the \nauthorization request: `msg.payload.access_token`\n*/\n\nvar baseURL = \"https://api-prd.kpn.com/communication/weseedo/weseedodirect/api\";\nvar apiEndpoint = \"/users\";\n\nmsg.method = \"POST\";\nmsg.url = baseURL + apiEndpoint;\nmsg.headers = {};\nmsg.headers.Authorization = \"Bearer \" + msg.payload.access_token;\nmsg.headers[\"Content-Type\"] = \"application/json\";\n//msg.payload = null;\nmsg.payload = msg.json;\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","x":1120,"y":498,"wires":[["4cc0a98e.b309e8","7d097c5.f657784"]],"info":"Use Bearer token from previous request in the headers to authenticate API request.\n\nNote: The bearer token gets retrieved from the payload of the previous authorization request: `msg.payload.access_token`\n"},{"id":"109c86f.1fd6e79","type":"debug","z":"60c1ca1e.454ad4","name":"Create user request result","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":1574,"y":498,"wires":[]},{"id":"55d9045c.be1ddc","type":"change","z":"60c1ca1e.454ad4","name":"Set request body","rules":[{"t":"set","p":"json","pt":"msg","to":"{\"first_name\":\"New user first name\",\"last_name\":\"New user family name\",\"password\":\"new.user.1234\",\"role\":\"CFO\",\"email\":\"new.user@email.com\",\"locale\":\"nl\",\"company\":\"TestUser Ltd\"}","tot":"json"}],"action":"","property":"","from":"","to":"","reg":false,"x":910,"y":494,"wires":[["7ad90aa8.e21a54"]],"info":"1. Double-click `Set request body`\n2. Open the json and enter the details of the new user.\n```\n{\n    \"first_name\": \"New user first name\",\n    \"last_name\": \"New user family name\",\n    \"password\": \"new.user.1234\",\n    \"role\": \"CFO\",\n    \"email\": \"new.user@email.com\",\n    \"locale\": \"nl\",\n    \"company\": \"TestUser Ltd\"\n}\n```\n3. click `Done`"},{"id":"45991e23.4e57b","type":"comment","z":"60c1ca1e.454ad4","name":"Readme: Create new user","info":"# This flow creates a new agent user\n\n## Connect the flow\n\n1. Disconnect any other flows.\n2. Connect the `Obtain access token flow` with this flow. \n\n## Set the request body\n\n1. Double-click the node `Set request body`\n2. Open the json and enter the details of the new user.\n```\n{\n    \"first_name\": \"New user first name\",\n    \"last_name\": \"New user family name\",\n    \"password\": \"new.user.1234\",\n    \"role\": \"CFO\",\n    \"email\": \"new.user@email.com\",\n    \"locale\": \"nl\",\n    \"company\": \"TestUser Ltd\"\n}\n```\n3. Click `Done`\n\n## Save the changes\n\n1. Click `Deploy`\n\n## Send the request\n\n1. Click on the `Trigger request` button to send the request.\n\n## Check the response \n\n1. Go to the `Debug messages` pane.","x":670,"y":460,"wires":[]},{"id":"f4feea2d.e74998","type":"inject","z":"60c1ca1e.454ad4","name":"Trigger request","props":[{"p":"payload"},{"p":"topic","vt":"str"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"","payloadType":"date","x":160,"y":440,"wires":[["bb6659d0.670fc8"]]},{"id":"bb6659d0.670fc8","type":"credentials","z":"60c1ca1e.454ad4","name":"Set API Store credentials","props":[{"value":"client_id","type":"msg"},{"value":"client_secret","type":"msg"}],"x":169,"y":505,"wires":[["9a4587ac.1fe1d8"]]},{"id":"9a4587ac.1fe1d8","type":"function","z":"60c1ca1e.454ad4","name":"Prepare request","func":"/*\nTo use KPN APIs, an access token (also called bearer) token must first be obtained.\nThe bearer token is obtained by invoking an Authorization API (`loginAPI`) using a POST method.\nThe API payload is an object with the client credentials:\n\nclient_id\nclient_secret\n\nIf correct, the API returns a payload object that will contain a valid access token authentication in subsequest API requests.\n*/\n\n// set `loginAPI` API here:\n\nvar loginAPI = \"https://api-prd.kpn.com/oauth/client_credential/accesstoken?grant_type=client_credentials\";\n\nmsg.method = \"POST\";\nmsg.url = loginAPI;\nmsg.headers = {};\nmsg.headers[\"Content-Type\"] = \"application/x-www-form-urlencoded\";\n\n// Use your `client_id` and `client_secret` from KPN API Store.\nmsg.payload = 'client_id=' + msg.client_id + '&client_secret=' + msg.client_secret;\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","x":139,"y":565,"wires":[["f03fa5a2.489728"]],"info":"To use KPN APIs, an access token (also called bearer) token must first be obtained.\n\nThe bearer token is obtained by invoking an Authorization API (`loginAPI`) using a POST method.\n\nThe API payload is an object with the `client credentials`:\n* `client_id`\n* `client_secret`\n\n\nUse your `client_id` and `client_secret` from KPN API Store.\n\nIf correct, the API returns a payload object that will contain a valid access token authentication in subsequest API requests."},{"id":"f03fa5a2.489728","type":"http request","z":"60c1ca1e.454ad4","name":"Access token request","method":"use","ret":"obj","paytoqs":"ignore","url":"","tls":"","persist":false,"proxy":"","authType":"","x":159,"y":625,"wires":[["48cee01d.4338d","9c9c6de9.de7c2"]]},{"id":"48cee01d.4338d","type":"debug","z":"60c1ca1e.454ad4","name":"Token request result","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":159,"y":685,"wires":[]},{"id":"d5e5f5a4.804b78","type":"switch","z":"60c1ca1e.454ad4","name":"If access token received","property":"statusCode","propertyType":"msg","rules":[{"t":"eq","v":"200","vt":"str"},{"t":"else"}],"checkall":"true","repair":false,"outputs":2,"x":670,"y":706,"wires":[["2635f525.e70c1a"],[]],"inputLabels":["httpResult"],"outputLabels":["noToken","tokenReceived"]},{"id":"f80df8ca.5539a8","type":"http request","z":"60c1ca1e.454ad4","name":"Create user request","method":"use","ret":"obj","paytoqs":"ignore","url":"","tls":"","persist":false,"proxy":"","authType":"","x":1490,"y":699,"wires":[["f3e97899.8968f8"]]},{"id":"475a76d6.1d8068","type":"function","z":"60c1ca1e.454ad4","name":"Prepare request","func":"/*\nUse Access (Bearer) token to authenticate API call.\nIn this example, we will use the \"/sms-kpn/v1/send\" API\n\nNote: The Access token gets retrieved from the \nauthorization request: `msg.payload.access_token`\n\nAdd `user_email` as header in order to send the SMS.\n*/\n\nvar baseURL = \"https://api-prd.kpn.com/communication/weseedo/weseedodirect/api\";\nvar apiEndpoint = \"/users/\";\n\nmsg.method = \"PUT\";\nmsg.url = baseURL + apiEndpoint + msg.user_id;\nmsg.headers = {};\nmsg.headers.Authorization = \"Bearer \" + msg.payload.access_token;\nmsg.headers[\"Content-Type\"] = \"application/json\";\n//msg.payload = null;\nmsg.payload = msg.json;\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","x":1280,"y":699,"wires":[["f80df8ca.5539a8","49df6bac.2e56f4"]],"info":"Use Bearer token from previous request in the headers to authenticate API request.\n\nNote: The bearer token gets retrieved from the payload of the previous authorization request: `msg.payload.access_token`\n"},{"id":"f3e97899.8968f8","type":"debug","z":"60c1ca1e.454ad4","name":"Create user request result","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":1724,"y":699,"wires":[]},{"id":"2635f525.e70c1a","type":"change","z":"60c1ca1e.454ad4","name":"Set request body","rules":[{"t":"set","p":"json","pt":"msg","to":"{\"first_name\":\"D\",\"last_name\":\"C\",\"locale\":\"nl\"}","tot":"json"}],"action":"","property":"","from":"","to":"","reg":false,"x":910,"y":699,"wires":[["4384472d.6dbc98"]]},{"id":"4384472d.6dbc98","type":"credentials","z":"60c1ca1e.454ad4","name":"User ID","props":[{"value":"user_id","type":"msg"}],"x":1100,"y":699,"wires":[["475a76d6.1d8068"]]},{"id":"f9a7f938.334bf8","type":"switch","z":"60c1ca1e.454ad4","name":"If access token received","property":"statusCode","propertyType":"msg","rules":[{"t":"eq","v":"200","vt":"str"},{"t":"else"}],"checkall":"true","repair":false,"outputs":2,"x":670,"y":318,"wires":[["4e779b48.cf4094"],[]],"inputLabels":["httpResult"],"outputLabels":["noToken","tokenReceived"]},{"id":"13decb54.e67205","type":"http request","z":"60c1ca1e.454ad4","name":"Create user request","method":"use","ret":"obj","paytoqs":"ignore","url":"","tls":"","persist":false,"proxy":"","authType":"","x":1129,"y":311,"wires":[["26564ef8.d80a02"]]},{"id":"4e779b48.cf4094","type":"function","z":"60c1ca1e.454ad4","name":"Prepare request","func":"/*\nUse Access (Bearer) token to authenticate API call.\nIn this example, we will use the \"/sms-kpn/v1/send\" API\n\nNote: The Access token gets retrieved from the \nauthorization request: `msg.payload.access_token`\n\nFor WeSeeDo:\nAdd the header `company_email`\n*/\n\nvar baseURL = \"https://api-prd.kpn.com/communication/weseedo/weseedodirect/api\";\nvar apiEndpoint = \"/users\";\n\nmsg.method = \"GET\";\nmsg.url = baseURL + apiEndpoint;\nmsg.headers = {};\nmsg.headers.Authorization = \"Bearer \" + msg.payload.access_token;\nmsg.headers[\"Content-Type\"] = \"application/json\";\n//msg.payload = null;\nmsg.payload = msg.json;\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","x":909,"y":311,"wires":[["13decb54.e67205","284ddccd.5bc164"]],"info":"Use Bearer token from previous request in the headers to authenticate API request.\n\nNote: The bearer token gets retrieved from the payload of the previous authorization request: `msg.payload.access_token`\n"},{"id":"26564ef8.d80a02","type":"debug","z":"60c1ca1e.454ad4","name":"Create user request result","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":1370,"y":311,"wires":[]},{"id":"9c9c6de9.de7c2","type":"switch","z":"60c1ca1e.454ad4","name":"If access token received","property":"statusCode","propertyType":"msg","rules":[{"t":"eq","v":"200","vt":"str"},{"t":"else"}],"checkall":"true","repair":false,"outputs":2,"x":670,"y":105,"wires":[["381e40e.a43d0c"],["ebd998a2.3bf458"]],"inputLabels":["httpResult"],"outputLabels":["noToken","tokenReceived"]},{"id":"ebd998a2.3bf458","type":"debug","z":"60c1ca1e.454ad4","name":"No token","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","statusVal":"","statusType":"auto","x":880,"y":140,"wires":[]},{"id":"a5d9a3a5.93014","type":"http request","z":"60c1ca1e.454ad4","name":"Create user request","method":"use","ret":"obj","paytoqs":"ignore","url":"","tls":"","persist":false,"proxy":"","authType":"","x":1280,"y":98,"wires":[["5929398.3dec5c8"]]},{"id":"6beae84c.69fdd8","type":"function","z":"60c1ca1e.454ad4","name":"Prepare request","func":"/*\nUse Access (Bearer) token to authenticate API call.\nIn this example, we will use the \"/sms-kpn/v1/send\" API\n\nNote: The Access token gets retrieved from the \nauthorization request: `msg.payload.access_token`\n\nAdd `user_email` as header in order to send the SMS.\n*/\n\nvar baseURL = \"https://api-prd.kpn.com/communication/weseedo/weseedodirect/api\";\nvar apiEndpoint = \"/users/\";\n\nmsg.method = \"GET\";\nmsg.url = baseURL + apiEndpoint + msg.user_id;\nmsg.headers = {};\nmsg.headers.Authorization = \"Bearer \" + msg.payload.access_token;\nmsg.headers[\"Content-Type\"] = \"application/json\";\n//msg.payload = null;\nmsg.payload = msg.json;\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","x":1060,"y":98,"wires":[["a5d9a3a5.93014","92d62df9.c9ec"]],"info":"Use Bearer token from previous request in the headers to authenticate API request.\n\nNote: The bearer token gets retrieved from the payload of the previous authorization request: `msg.payload.access_token`\n"},{"id":"5929398.3dec5c8","type":"debug","z":"60c1ca1e.454ad4","name":"Create user request result","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":1510,"y":98,"wires":[]},{"id":"92d62df9.c9ec","type":"debug","z":"60c1ca1e.454ad4","name":"Prepare request result","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":1280,"y":140,"wires":[]},{"id":"381e40e.a43d0c","type":"credentials","z":"60c1ca1e.454ad4","name":"User ID","props":[{"value":"user_id","type":"msg"}],"x":880,"y":98,"wires":[["6beae84c.69fdd8"]]},{"id":"58d9bb9a.5f2964","type":"switch","z":"60c1ca1e.454ad4","name":"If access token received","property":"statusCode","propertyType":"msg","rules":[{"t":"eq","v":"200","vt":"str"},{"t":"else"}],"checkall":"true","repair":false,"outputs":2,"x":670,"y":887,"wires":[["e84c1314.eb5da"],[]],"inputLabels":["httpResult"],"outputLabels":["noToken","tokenReceived"]},{"id":"40c19037.f302a","type":"http request","z":"60c1ca1e.454ad4","name":"Create user request","method":"use","ret":"obj","paytoqs":"ignore","url":"","tls":"","persist":false,"proxy":"","authType":"","x":1288,"y":882,"wires":[["3255ac46.9687a4"]]},{"id":"50705a91.8089e4","type":"function","z":"60c1ca1e.454ad4","name":"Prepare request","func":"/*\nUse Access (Bearer) token to authenticate API call.\nIn this example, we will use the \"/sms-kpn/v1/send\" API\n\nNote: The Access token gets retrieved from the \nauthorization request: `msg.payload.access_token`\n\nAdd `user_email` as header in order to send the SMS.\n*/\n\nvar baseURL = \"https://api-prd.kpn.com/communication/weseedo/weseedodirect/api\";\nvar apiEndpoint = \"/users/\";\n\nmsg.method = \"GET\";\nmsg.url = baseURL + apiEndpoint + msg.user_id;\nmsg.headers = {};\nmsg.headers.Authorization = \"Bearer \" + msg.payload.access_token;\nmsg.headers[\"Content-Type\"] = \"application/json\";\n//msg.payload = null;\nmsg.payload = msg.json;\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","x":1066,"y":881,"wires":[["40c19037.f302a","ac709aa1.4132e8"]],"info":"Use Bearer token from previous request in the headers to authenticate API request.\n\nNote: The bearer token gets retrieved from the payload of the previous authorization request: `msg.payload.access_token`\n"},{"id":"3255ac46.9687a4","type":"debug","z":"60c1ca1e.454ad4","name":"Create user request result","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":1526,"y":882,"wires":[]},{"id":"e84c1314.eb5da","type":"credentials","z":"60c1ca1e.454ad4","name":"User ID","props":[{"value":"user_id","type":"msg"}],"x":880,"y":881,"wires":[["50705a91.8089e4"]]},{"id":"1c39f38d.2409dc","type":"switch","z":"60c1ca1e.454ad4","name":"If access token received","property":"statusCode","propertyType":"msg","rules":[{"t":"eq","v":"200","vt":"str"},{"t":"else"}],"checkall":"true","repair":false,"outputs":2,"x":670,"y":1087,"wires":[["70339139.f8467"],[]],"inputLabels":["httpResult"],"outputLabels":["noToken","tokenReceived"]},{"id":"ae0f78b5.47b4a8","type":"http request","z":"60c1ca1e.454ad4","name":"Create user request","method":"use","ret":"obj","paytoqs":"ignore","url":"","tls":"","persist":false,"proxy":"","authType":"","x":1338,"y":1100,"wires":[["27386685.e9e7ea"]]},{"id":"cbbfbcf3.471e3","type":"function","z":"60c1ca1e.454ad4","name":"Prepare request","func":"/*\nUse Access (Bearer) token to authenticate API call.\nIn this example, we will use the \"/sms-kpn/v1/send\" API\n\nNote: The Access token gets retrieved from the \nauthorization request: `msg.payload.access_token`\n*/\n\nvar baseURL = \"https://api-prd.kpn.com/communication/weseedo/weseedodirect/api\";\nvar apiEndpoint = \"/meeting\";\n\nmsg.method = \"POST\";\nmsg.url = baseURL + apiEndpoint;\nmsg.headers = {};\nmsg.headers.Authorization = \"Bearer \" + msg.payload.access_token;\nmsg.headers[\"Content-Type\"] = \"application/json\";\nmsg.headers[\"user_email\"] = \"test.user@email.com\";\n//msg.payload = null;\nmsg.payload = msg.json;\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","x":1120,"y":1081,"wires":[["ae0f78b5.47b4a8","3013a422.5beafc"]],"info":"Use Bearer token from previous request in the headers to authenticate API request.\n\nNote: The bearer token gets retrieved from the payload of the previous authorization request: `msg.payload.access_token`\n"},{"id":"27386685.e9e7ea","type":"debug","z":"60c1ca1e.454ad4","name":"Create user request result","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":1571,"y":1100,"wires":[]},{"id":"70339139.f8467","type":"change","z":"60c1ca1e.454ad4","name":"Set request body","rules":[{"t":"set","p":"json","pt":"msg","to":"{\"participant\":\"0612345678\"}","tot":"json"}],"action":"","property":"","from":"","to":"","reg":false,"x":910,"y":1081,"wires":[["cbbfbcf3.471e3"]]},{"id":"73ad8a49.d8ff44","type":"comment","z":"60c1ca1e.454ad4","name":"Readme: Create a meeting","info":"# This flow creates a new meeting\n\n## Connect the flow\n\n1. Disconnect any other flows.\n2. Connect the `Obtain access token flow` with this flow. \n\n## Set the request body\n\n1. Double-click the node `Set request body`\n2. Open the json and enter the telephone number of the participant. Dutch formats `0612345678` and`12345678` are automatically converted to their international format `+31612345678`.\n\n```json\n{\n    \"participant\": \"0612345678\"\n}\n```\n3. Click `Done`.\n\n## Save the changes\n\n1. Click `Deploy`\n\n## Send the request\n\n1. . Click on the `Trigger request` button to send the request.\n\n## Check the response \n\n1. Go to the `Debug messages` pane.\n2. Go to the Debug message `Create user result` and open the following:\n - `object`\n - `payload`\n - `result`\n - `participants`\n \n**Note** Save the `id` of the participant (visitor) and the `hash` for the `Send meeting invitation request`.\n\n**Example**\n\n```json\n\"participants\": [\n    {\n      \"username\": \"visitor.aSpde07KI7sIHfsD\",\n      \"name\": \"0612345678\",\n      \"id\": \"THE_ID_OF_THE_PARTICIPANT\",\n      \"hash\": \"A_HASHED_TOKEN_FOR_THE_PARTICIPANT\"\n    }\n        \n```\n","x":670,"y":1047,"wires":[]},{"id":"3a656874.bc8038","type":"switch","z":"60c1ca1e.454ad4","name":"If access token received","property":"statusCode","propertyType":"msg","rules":[{"t":"eq","v":"200","vt":"str"},{"t":"else"}],"checkall":"true","repair":false,"outputs":2,"x":670,"y":1281,"wires":[["8404bca1.9d93b"],[]],"inputLabels":["httpResult"],"outputLabels":["noToken","tokenReceived"]},{"id":"f0a97b72.d2d1c8","type":"http request","z":"60c1ca1e.454ad4","name":"Create user request","method":"use","ret":"obj","paytoqs":"ignore","url":"","tls":"","persist":false,"proxy":"","authType":"","x":1340,"y":1275,"wires":[["59201a49.219e14"]]},{"id":"8db4008f.6339a","type":"function","z":"60c1ca1e.454ad4","name":"Prepare request","func":"/*\nUse Access (Bearer) token to authenticate API call.\nIn this example, we will use the \"/sms-kpn/v1/send\" API\n\nNote: The Access token gets retrieved from the \nauthorization request: `msg.payload.access_token`\n\nJSON in Set Request:\nUse the `id` of the participant that was returned when creating the meeting.\n\n\n'participant': Add `user_email` as header in order to send the SMS.\n'body': Use the `hash` of the participant that was returned when creating the meeting in the secure URL.\n\n*/\n\nvar baseURL = \"https://api-prd.kpn.com/communication/weseedo/weseedodirect/api\";\nvar apiEndpoint = \"/sms\";\n\nmsg.method = \"POST\";\nmsg.url = baseURL + apiEndpoint;\nmsg.headers = {};\nmsg.headers.Authorization = \"Bearer \" + msg.payload.access_token;\nmsg.headers[\"Content-Type\"] = \"application/json\";\nmsg.headers[\"user_email\"] = \"test.user@email.com\";\n//msg.payload = null;\nmsg.payload = msg.json;\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","x":1120,"y":1275,"wires":[["f0a97b72.d2d1c8","cc159149.d9721"]],"info":"Use Bearer token from previous request in the headers to authenticate API request.\n\nNote: The bearer token gets retrieved from the payload of the previous authorization request: `msg.payload.access_token`\n"},{"id":"59201a49.219e14","type":"debug","z":"60c1ca1e.454ad4","name":"Create user request result","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":1576,"y":1275,"wires":[]},{"id":"8404bca1.9d93b","type":"change","z":"60c1ca1e.454ad4","name":"Set request body","rules":[{"t":"set","p":"json","pt":"msg","to":"{\"participant\":\"5f36a7a970d9e4667019a477\",\"body\":\"WeSeeDo TEST: https://sandbox-direct.weseedo.nl/client.html?id=EOpegQkeeVRb8IGdKUcIruahc8flgCuu_3iQApmB1Lak2rDAk8Gw16X8yADi6RUxe\"}","tot":"json"}],"action":"","property":"","from":"","to":"","reg":false,"x":910,"y":1275,"wires":[["8db4008f.6339a"]]},{"id":"ecc3da63.e16098","type":"comment","z":"60c1ca1e.454ad4","name":"Readme: Send meeting invitation","info":"# This flow sends the meeting request to the participant\n\n## Connect the flow\n\n1. Disconnect any other flows.\n2. Connect the `Obtain access token flow` with this flow. \n\n## Set the request body\n\n1. Double-click the node `Set request body`\n2. Open the json and enter the `id` of the participant and the `hash` from the response of the `Create meeting` request.\n\n```json\n{\n    \"participant\": \"THE_ID_OF_THE_PARTICIPANT\",\n    \"body\": \"WeSeeDo TEST: https://sandbox-direct.weseedo.nl/client.html?id=A_HASHED_TOKEN_FOR_THE_PARTICIPANT\"\n}\n```\n3. Click `Done`.\n\n## Save the changes\n\n1. Click `Deploy`\n\n## Send the request\n\n1. . Click on the `Trigger request` button to send the request.\n\n## Check the response \n\n1. Go to the `Debug messages` pane.","x":690,"y":1243,"wires":[]},{"id":"cc159149.d9721","type":"debug","z":"60c1ca1e.454ad4","name":"Prepare request result","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":1340,"y":1319,"wires":[]},{"id":"3013a422.5beafc","type":"debug","z":"60c1ca1e.454ad4","name":"Prepare request result","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":1340,"y":1144,"wires":[]},{"id":"ac709aa1.4132e8","type":"debug","z":"60c1ca1e.454ad4","name":"Prepare request result","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":1287,"y":927,"wires":[]},{"id":"49df6bac.2e56f4","type":"debug","z":"60c1ca1e.454ad4","name":"Prepare request result","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":1492,"y":741,"wires":[]},{"id":"7d097c5.f657784","type":"debug","z":"60c1ca1e.454ad4","name":"Prepare request result","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":1340,"y":541,"wires":[]},{"id":"284ddccd.5bc164","type":"debug","z":"60c1ca1e.454ad4","name":"Prepare request result","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":1129,"y":357,"wires":[]},{"id":"ca3347cb.9202b8","type":"comment","z":"60c1ca1e.454ad4","name":"Readme: Update user","info":"# This flow updates an specific user\n\n## Connect the flow\n\n1. Disconnect any other flows.\n2. Connect the `Obtain access token flow` with this flow. \n\n## Set the request body\n\n1. Double-click the node `Set request body`.\n2. Double-click on the three dots to open the JSON and change the details of the user.\n```json\n{\n \"first_name\": \"Updated first name\",\n \"last_name\": \"Updated family name\",\n \"password\": \"Updated.user.1234\",\n \"role\": \"CFO\",\n \"email\": \"new.user@email.com\",\n \"locale\": \"nl\",\n \"company\": \"TestUser Ltd\"\n}\n```\n\n3. Double-click `Done`.\n\n## Set the user ID\n\n1. Double-click the node `User ID`.\n2. Enter the ID of the user you want to update.\n3. Click `Done`.\n\n\n## Save the changes\n\n1. Click `Deploy`\n\n## Send the request\n\n1. Click on the Trigger request button to send the request.\n\n## Check the response \n\n1. Go to the `Debug messages` pane.","x":660,"y":660,"wires":[]},{"id":"8ea61cda.23478","type":"comment","z":"60c1ca1e.454ad4","name":"Readme: Delete user","info":"# This flow deletes an individual user\n\n## Connect the flow\n\n1. Disconnect any other flows.\n2. Connect the `Obtain access token flow` with this flow. \n\n## Set the user ID\n\n1. Double-click the node `User ID`.\n2. Enter the ID of the user you want to delete. \n3. Click `Done.`\n\n## Save the changes\n\n1. Click `Deploy`\n\n## Send the request\n\n1. Click on the `Trigger request` button to send the request.\n\n## Check the response \n\n1. Go to the `Debug messages` pane.","x":660,"y":847,"wires":[]},{"id":"8b73e1cd.8a073","type":"comment","z":"60c1ca1e.454ad4","name":"Readme: Obtain access token ","info":"# This flow fetches the OAuth access token from the KPN Authorization API and passes it on to other flows.\n\n1. Sign into the KPN API Store.\n2. Go to the Sandbox.\n3. Copy your `Client ID` and `Client secret`.\n2. Double-click on the node `Set API Store credentials`.\n2. Paste your `Client ID` and `Client secret` into the corresponding fields.\n3. Click `Done`.","x":179,"y":397,"wires":[],"icon":"node-red/alert.svg"},{"id":"48300ce2.cb32a4","type":"comment","z":"60c1ca1e.454ad4","name":"Readme: Retrieve individual user ","info":"# This flow retrieves and individual user\n\n## Connect the flow\n\n1. Disconnect any other flows.\n2. Connect the `Access token request` node with this flow. `\n\n## Set the user ID\n\n1. Double-click the node `User ID`.\n2. Enter the ID of the user you want to retrieve. \n3. Click `Done.`\n\n## Save the changes\n\n1. Click `Deploy`\n\n## Send the request\n\n1. Click on the `Trigger request` button to send the request.\n\n## Check the response \n\n1. Go to the `Debug messages` pane.","x":690,"y":60,"wires":[]},{"id":"34fe7983.5897d6","type":"comment","z":"60c1ca1e.454ad4","name":"ReadMe: Retrieve list of users ","info":"# This flow retrieves a list of all users\n\n## Connect the flow\n\n1. Disconnect any other flows.\n2. Connect the `Access token request` node with this flow. \n\n## Save the changes\n\n1. Click `Deploy`\n\n## Send the request\n\n1. Click on the `Trigger request` button to send the request.\n\n## Check the response \n\n1. Go to the `Debug messages` pane.\n2. Go to the Debug message `Create user request result` and open\n - the `object` and then \n - the `payload`and then\n - the `result`.\nYou will find the individual user details in the `objects`.","x":680,"y":280,"wires":[]}]